[
  {
    "objectID": "posts/COMPUTE-2022/index.html",
    "href": "posts/COMPUTE-2022/index.html",
    "title": "COMPUTE 2022",
    "section": "",
    "text": "COMPUTE is an ACM India conference focused on computer education. This post summarizes my notes from the three days of the conference."
  },
  {
    "objectID": "posts/COMPUTE-2022/index.html#day-1",
    "href": "posts/COMPUTE-2022/index.html#day-1",
    "title": "COMPUTE 2022",
    "section": "Day 1",
    "text": "Day 1\nSo much learning was packed in one day! Starting with Hemangee Kapoor on DEI activities at ACM, fun-filled, comics-based teaching (Ullas), game for teaching linked list (Sridhar Chimalakonda), AI assisted programming (Sriram Rajamani), IITM’s data science UG program at scale (Andrew Thangaraj), and many more, it was a day extremely well spent. Thank you ACM iSIGCSE!\nAnd , what a beautiful location (Manipal University Jaipur)! It is an amazing campus, reflecting the local architecture, very impressive buildings and overall infra."
  },
  {
    "objectID": "posts/COMPUTE-2022/index.html#day-2",
    "href": "posts/COMPUTE-2022/index.html#day-2",
    "title": "COMPUTE 2022",
    "section": "Day 2",
    "text": "Day 2\nThe day started with Prof Smruti Sarangi talking about how he teaches Computer Architecture and why he does it the way he does it. It was an extremely informative and thought-provoking talk, and very engaging one! Hats off to him.\nThis was followed by some good paper presentations around pedagogy and course designs by Arun Raman, Neeraj Goel, Manoj Kumar Lal, and Abhijat Vichare, good ideas shared and discussed passionately!\nPost-lunch, we had a brave soul N S Kumar doing live coding on stage and showing how data structure should be taught in class! It was amazing to see what he could accomplish in 45 min session, unfazed by so many people looking at his code and pointing out issues :-)\nBrett A. Becker had an insightful talk (online) on research-driven teaching and teaching-driven research - how teachers can do research in their classroom, and bring in research into their practice. Very insightful and a must-attend session for all the teachers (do grab a copy of the recording or at least the deck!).\nThis was followed by two excellent workshops, conducted respectively by Prof. Viraj Kumar and Prof. Venkatesh Choppella. Given cricket match was pretty much a lost cause by then, we had good attendance in the workshop!\nVery action-packed day, and great learning throughout the day as expected."
  },
  {
    "objectID": "posts/COMPUTE-2022/index.html#day-3",
    "href": "posts/COMPUTE-2022/index.html#day-3",
    "title": "COMPUTE 2022",
    "section": "Day 3",
    "text": "Day 3\nThe day started out with Yogesh Simmhan presenting his ideas and experiences of teaching distributed systems course and the design of the corresponding microspecialization course for AICTE. Very relevant and insightful comments and a good discussion around skills for creation vs. comprehension, a topic close to my heart. This was followed by a panel discussion on software engineering course relevance for future software development with Vinita Gera, Rajveer Singh Shekhawat , Sumitha Prashanth , Atul Kumar, Prof. Dheeraj Sanghi, and yours truly. It was a thoroughly enjoyable session well moderated by Vinita, incisive and candid comments by Prof Sanghi set the tone for passionate conversations and hopefully audience felt it was a good use of their time. More on this in a subsequent post.\nPost lunch session was focused on computation thinking in school, how to teach it and CSPathshala, and a good discussion ensued around why, what and how of CT! Very relevant and engaging conversations with R Venkatesh, Chandan Dasgupta , Meenakshi D’Souza, and Sabitha Vinod.\nI had a great discussion with a few professors who teach BSc CS at colleges around why industry discriminates against these grads even though they study the same thing as BTech folks (this spilled over from our panel discussion where this was brought up). Definitely an area for industry to look into, and I hope to do my bit to help here, more on this topic in a subsequent post.\nThis has been an awesome experience, an extreme learning dose, for me personally, and I am enthused about my research. I made many friends and hope to continue this relationship to benefit mutually and the community and make the ties stronger! I got lots of ideas on what can be done to grow the community through the interactions over these three days and I hope I can help drive some of them. Thank you ACM India and ACM iSIGCSE for a great forum, really appreciate this. COMPUTE comes to Hyderabad next year, Profs. Tilottama Goswami and Venkatesh Choppella told as at the closure."
  },
  {
    "objectID": "posts/phd-work/index.html",
    "href": "posts/phd-work/index.html",
    "title": "PhD Research work",
    "section": "",
    "text": "Research problem\nMy research examines 3 questions:\n\nWhy do new campus hires (I am calling them novice engineer) struggle and take time in understanding large products they are supposed to work on?\nHow does current undergraduate computing education prepare novice engineers for this activity?\nWhat can help novice engineers comprehend large products faster and better?\n\nMy personal observation over last several years at a large SaaS product company is that novice engineers find it really hard to comprehend large software products. This is also borne by several research studies which show that it takes up to two years to gain mastery over a product (see Zhou and Mockus (2010) and Sim and Holt (1998)).\n\n\nResearch direction\nI am looking at three aspects of this problem and seek solutions:\n\nWhat are the challenges novice engineers face (during onboarding and after) as they comprehend? Mostly talking to these engineers as well as students in their 3rd/4th year, surveying them, etc.\nWhat courses in undergraduate CS curriculum are likely to help them? Are they doing so? This is mostly about going through various courses, what is typically covered, and see how they can help, and what gaps are apparent.\nAre there skills and approaches that can help these novice engineers comprehend better? Here my goal is to see the applicability of a systems approach to modeling software.\n\n\n\nResearch contribution\nIn SERC@IIITH, we have been applying an approach to teaching and learning algorithms that we call Algodynamics (see Choppella, Viswanath, and Kumar (2021)). The idea is that when you think of algorithms as systems, and then model them as interactive systems, you get much better understanding and insights. You can read more about it on the Algodynamics page and see some demos).\nOur hypothesis is that we can think of a software product as a system and model its behavior accordingly. My work is focused on showing how this can be done for large systems and what principles can be learned and used by novice engineers to address comprehension problem well. Of course, this also applies when they build new software systems.\n\n\n\n\n\nReferences\n\nChoppella, Venkatesh, Kasturi Viswanath, and Mrityunjay Kumar. 2021. “Algodynamics: Algorithms as Systems.” In 2021 IEEE Frontiers in Education Conference (FIE), 1–9. IEEE.\n\n\nSim, Susan Elliott, and Richard C Holt. 1998. “The Ramp-up Problem in Software Projects: A Case Study of How Software Immigrants Naturalize.” In Proceedings of the 20th International Conference on Software Engineering, 361–70. IEEE.\n\n\nZhou, Minghui, and Audris Mockus. 2010. “Developer Fluency: Achieving True Mastery in Software Projects.” In Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, 137–46."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "home",
    "section": "",
    "text": "My name is Mrityunjay Kumar (MJ). I am a PhD student (Part-time) at IIIT Hyderabad Software Engineering Research Center. I am also a full-time employee (currently on sabbatical) at Zenoti, a category leader Enterprise SaaS product company in beauty and wellness vertical."
  },
  {
    "objectID": "index.html#phd-focus",
    "href": "index.html#phd-focus",
    "title": "home",
    "section": "PhD Focus",
    "text": "PhD Focus\nFor my PhD, I am focusing on understanding why new college hires in SaaS product companies take time to become productive, and how an undergraduate CS education can be augmented to equip them to do better. The problem statement comes from my personal experience of hiring and managing campus (and 1-3 years experienced) candidates and working with other managers who do so. My thesis is intended to devise a pedagogical approach to teach modeling and other skills required to address this problem, and demonstrate that such interventions can work well. We believe pedagogy of Algodynamics can be a good starting point."
  },
  {
    "objectID": "index.html#research-interests",
    "href": "index.html#research-interests",
    "title": "home",
    "section": "Research Interests",
    "text": "Research Interests\nI am interested in education research in general, and Computer Science Education in particular - teaching, learning and curriculum aspects. I love to teach, coach and mentor - professionally and personally.\nUnder the guidance of my adviser Prof. Venkatesh Choppella, I have been studying learning theories applicable to Virtual Labs, applying pedagogy of Algodynamics to teaching algorithms, and most recently, formulating an approach to teach application software modeling through Algodynamics.\nGoogle Scholar"
  },
  {
    "objectID": "index.html#other-interests",
    "href": "index.html#other-interests",
    "title": "home",
    "section": "Other Interests",
    "text": "Other Interests\nI am interested in many other areas, you can find my writings about Career Management and Being Critical here. I am involved with startup community in a limited fashion, currently working as a volunteer to curate annual SaasBoomi build event, a community-driven, founder-helping-founder ecosystem for SaaS companies in India to help build a product nation. I also help out a little bit around career counselling and teaching with Udayancare Hyderabad chapter and hope to do much more in this space.\nMy LinkedIn profile shows my professional interests and experience."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Why do new campus hires struggle at SaaS product companies?\n\n\n\n\n\n\n\nResearch\n\n\n\n\nA description of my research work - problems and proposed solutions\n\n\n\n\n\n\nJan 2, 2024\n\n\nMrityunjay Kumar\n\n\n\n\n\n\n  \n\n\n\n\nPhD Research work\n\n\n\n\n\n\n\nResearch\n\n\n\n\nA brief description of my research work\n\n\n\n\n\n\nApr 25, 2023\n\n\nMrityunjay Kumar\n\n\n\n\n\n\n  \n\n\n\n\nCOMPUTE 2022\n\n\n\n\n\n\n\nConference\n\n\n\n\nSummary of my notes from the conference\n\n\n\n\n\n\nNov 25, 2022\n\n\nMrityunjay Kumar\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/phd-work-2024/index.html",
    "href": "posts/phd-work-2024/index.html",
    "title": "Why do new campus hires struggle at SaaS product companies?",
    "section": "",
    "text": "What is the problem?\nWhen a graduating student joins a software product company as a novice engineer, one of the first tasks assigned to them is to understand the product (or a part of it) they will work on. This is a prerequisite for writing production code. Typically, the novice engineer proceeds by attempting to read the source code from the product code repository to understand the functionality and behavior and uses the partial documentation and overview information received in onboarding sessions as appropriate. However, this usually becomes a complicated and lengthy process for these engineers. Given that the company and the engineers want to get productive quickly, this creates situations where partially trained engineers hit the production floor and may create costly production issues.\nOver last decade, I have hired students from campus and closely observed their struggle to comprehend software systems. While I initially attributed this to their lack of motivation to learn appropriate skills in college, I now hypothesize that the skills needed to do well at these comprehension tasks are not included or taught well in the regular computer science courses at the undergraduate level. My research examines this further.\nWhile I think this is a world-wide problem, my research focus is on Indian context where this shows up in an extreme form. When we lament the lack of employability and gap of skills (Aggarwal, Nithyanand, and Sharma (2020), Wheebox (2022)), and then get drawn to offering industry-tailored skills as a solution, we perpetrate the problem. My research aims to identify key changes that can be brought to curriculum and pedagogy to address this with a long-term view.\n\n\nWhy does this problem exist?\nMy research suggests that there are two key disconnects between academic world and industrial world that make it difficult for the novice engineer to be effective. 1. Creation vs. comprehension skills: CS curriculum worldwide is disproportionately focused on how to construct a new piece of software. This is at odds with what an engineer is asked to do when they join (and much afterwards) - understand the existing software and evolve it. Initial creation tasks (bug fixes, small features) are also expected to be used for comprehension, as a means to understand the software better.\n2. Simple vs. complex systems: Training for undergraduate students is limited to simple systems that they have created individually or in groups (and don’t deal with existing systems). In fact, most assignments ask them to create algorithms and programs, not build systems. On the other hand, software product companies have a large, complex system that novice engineers are expected to work on. The complexity shows up in multiple ways: the codebase is so large that reading it to understand the system is quite difficult, and the behavior of the software is not apparent from the code that they do read and understand (because in complex systems, behavior emerges from the interactions and is a run-time property).\nIt is no wonder they struggle at the workplace. In fact, it is a wonder that many of them do well even in their initial months.\nThe situation improves as they spend time with the product. Their understanding of emergent behavior improves and they also learn how to make the best use of information available (partial documentation, running system, subject matter experts, code knowledge, etc.). However, this wastes time and opportunity and the company may not be able or willing to accept this delay in getting to the expected productivity level.\n\n\nWhat can we do about it?\nThere are two insights that drives the solutions we propose through our research: 1. Large software products are complex systems if we see them from a systems lens (see Allan (2009)). 2. Systems science tells us that complex systems (in many disciplines) are understood better when learners model them (see Hmelo-Silver and Azevedo (2006), Hashem and Mioduser (2013), Verhoeff, Waarlo, and Boersma (2008)). 3. Modeling can be used to understand complex software systems as well.\nWhat is a complex software system? We define it as a system composed of two or more component systems where the behavior emerges from the interactions of these component systems. For example, a modern SaaS product architecture consists of a set of microservices - each of which demonstrate fairly simple behavior - that interact and collaborate with each other to produce the desired behavior, so we categorize SaaS products as complex software systems.\n\n\nResearch contribution\nThis research aims to produce three outputs: 1. A modeling language that can be used to model complex software systems - this should be easy to learn and use by novice engineers. 2. A learning strategy that can be used during onboarding process which allows the novice engineer to process the stream of information they get exposed to. The novice engineers can use modeling to develop their understanding of the product during this period, and refine their understanding by refining their models, as they acquire new information about the product. 3. A pedagogy (and associated content) to expose the students and novice engineers to complex systems and help them learn modeling skills that aid in comprehension. This can be offered to graduating students (as part of their third-year or fourth-year course) as well as to new campus hires (as part of their onboarding process).\nThe long term goal is to influence the CS curriculum to teach systems thinking via multiple existing courses and help produce more systems-aware CS graduates who we expect will also be more skillful and employable in product companies.\n\n\n\n\n\nReferences\n\nAggarwal, Varun, Siddharth Nithyanand, and Malvika Sharma. 2020. “National Employability Report for India - 2019.” SHL. Aspiring Minds. https://www.shl.com/en-in/resources/by-type/whitepapers-and-reports/national-employability-report-engineers-2019/.\n\n\nAllan, Rob. 2009. “Computational Research into Complex Systems.” Citeseer, 17.\n\n\nHashem, Kamel, and David Mioduser. 2013. “Learning by Modeling (LbM): Understanding Complex Systems by Articulating Structures, Behaviors, and Functions.” International Journal of Advanced Computer Science and Applications 4 (4). https://doi.org/10.14569/IJACSA.2013.040414.\n\n\nHmelo-Silver, Cindy E., and Roger Azevedo. 2006. “Understanding Complex Systems: Some Core Challenges.” Journal of the Learning Sciences 15 (1): 53–61. https://doi.org/10.1207/s15327809jls1501_7.\n\n\nVerhoeff, Roald P., Arend Jan Waarlo, and Kerst Th. Boersma. 2008. “Systems Modelling and the Development of Coherent Understanding of Cell Biology.” International Journal of Science Education 30 (4): 543–68. https://doi.org/10.1080/09500690701237780.\n\n\nWheebox. 2022. “India Skills Report - 2022.” India Skills Report. https://wheebox.com/assets/pdf/ISR_Report_2022.pdf."
  }
]